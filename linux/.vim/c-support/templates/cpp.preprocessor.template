$-------------------------------------------------------------------------
== preprocessor.include-global ==
#include	<<CURSOR>>
$-------------------------------------------------------------------------
== preprocessor.include-local ==
#include	"<CURSOR>"
$-------------------------------------------------------------------------
== preprocessor.define ==
#define	<CURSOR>			//
$-------------------------------------------------------------------------
== preprocessor.undefine ==
#undef	<CURSOR>			//
$-------------------------------------------------------------------------
== preprocessor.if-else-endif ==
#if  |?CONDITION:u|
<CURSOR><SPLIT>
#else      // -----  not |CONDITION|  -----

#endif     // -----  not |CONDITION|  -----
$-------------------------------------------------------------------------
== preprocessor.ifdef-else-endif ==
#ifdef  |?CONDITION:u|
<CURSOR><SPLIT>
#else      // -----  not |CONDITION|  -----

#endif     // -----  not |CONDITION|  -----
$-------------------------------------------------------------------------
== preprocessor.ifndef-else-endif ==
#ifndef  |?CONDITION:u|
<CURSOR><SPLIT>
#else      // -----  not |CONDITION|  -----

#endif     // -----  not |CONDITION|  -----
$-------------------------------------------------------------------------
== preprocessor.ifndef-def-endif ==
#ifndef  |?BASENAME:L|_H
#define  |BASENAME|_H
<CURSOR><SPLIT>
#endif   // ----- #ifndef |BASENAME|_H  -----
$-------------------------------------------------------------------------
== preprocessor.error ==
#error	"<CURSOR>"			//
$-------------------------------------------------------------------------
== preprocessor.line ==
#line	<CURSOR>			//
$-------------------------------------------------------------------------
== preprocessor.pragma ==
#pragma	<CURSOR>			//
$-------------------------------------------------------------------------
== preprocessor.debug_f ==
#ifdef DEBUG
   std::cout.width(i);
   std::cout.fill(' ');
   std::cout<<std::endl<<' ';
   std::cout.width(0);
   std::cout<<"#fun_"<<"<CURSOR>";
   i+=4;
#endif
$-------------------------------------------------------------------------
== preprocessor.debug_c ==
#ifdef DEBUG
<SPLIT>     std::cout<<std::endl<<<CURSOR>;
#endif
$-------------------------------------------------------------------------
== preprocessor.debug_a ==
    assert(<CURSOR>);
$-------------------------------------------------------------------------
== preprocessor.debug_s ==
#ifdef DEBUG
#include <iostream>
extern int i=0;
#endif
$-------------------------------------------------------------------------
== preprocessor.debug_i ==
#ifdef DEBUG
    i-=4;
#endif
$-------------------------------------------------------------------------

