
snippet 
dir
snippet 
dir
snippet 
dir
snippet 
dir
snippet 
dir
snippet 
dir
snippet 
dir
snippet 
dir
snippet 
dir
snippet 

snippet q
name
snippet d
		$(document).ready(function(){
				});
snippet 

			struct PointF3D {
				double x;
				double y;
				double z;
				//
				PointF3D():x(0),y(0),z(0) { }
				PointF3D(double x0, double y0, double z0):x(x0), y(y0),z(z0){ }
		//        PointF3D(const PointF3D &other):x(other.x), y(other.y), z(other.z){ }

				PointF3D( const PointF3D &other ){ *this = other; }   
				PointF3D& operator = ( const PointF3D &other ) { x = other.x; y = other.y; z = other.z; return *this; }

				PointF3D operator + (const PointF3D &other) const{
					return PointF3D(x + other.x, y + other.y, z + other.z);
				}
				PointF3D& operator += (const PointF3D &other){
					x += other.x;
					y += other.y;
					z += other.z;
					return *this;
				}

				PointF3D operator * (const PointF3D &other) const{
					return PointF3D(x * other.x, y * other.y, z * other.z);
				}
				PointF3D& operator *= (double num){
					x *= num;
					y *= num;
					z *= num;
					return *this;
				}
				//! do support string like weak order comparing
				bool operator < (const PointF3D &other) const{
											if (x < other.x)
											return true;
										else if (x > other.x)
										return false;
									else if (y < other.y)
									return true;
								else if (y > other.y)
								return false;
							else if( z < other.z)
							return true;
						else
						return false;
				};

snippet 
/mytags/dictionary/jzt.list<cr>
snippet 
SELL SELLSHORT min
snippet 
 arg
